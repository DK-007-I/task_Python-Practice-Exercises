task1
import turtle

screen = turtle.Screen()
screen.bgcolor("white") #Фон окна

# Создаем объект черепашки для рисования

pen = turtle.Turtle()

# Делаем квадрат с длинной сторон 150 пикселей

for _ in range(4):
    turtle.up()
    pen.fd(150)
    pen.lt(90)
    turtle.down()
turtle.done()

task2
import turtle

# Создаем окно для рисования
screen = turtle.Screen()
screen.bgcolor("white")

# Создаем объект черепашки для рисования
pen = turtle.Turtle()

# Начальная позиция
pen.penup()
pen.goto(-100, 0)
pen.pendown()

# Рисуем треугольник
pen.goto(0, 100)  # Вершина треугольника
pen.goto(100, 0)  # Правый угол треугольника
pen.goto(-100, 0)  # Закрытие треугольника
turtle.done()

task3
import turtle

# Создаем окно для рисования
screen = turtle.Screen()
screen.bgcolor("lightblue")  # Меняем цвет фона

# Создаем объект черепашки для рисования
pen = turtle.Turtle()

# Рисуем окружность с радиусом 80 пикселей
pen.circle(80)

turtle.done()

task4
import turtle

# Настройка экрана
screen = turtle.Screen()
screen.bgcolor("white")

# Создаем объект черепашки для рисования
pen = turtle.Turtle()

# Нарисуем эллипс, рисуя несколько дуг
pen.shape("turtle")
pen.penup()
pen.goto(0, -80)  # Начинаем с нижней точки эллипса
pen.pendown()

pen.setheading(45)  # Устанавливаем угол для правильного рисования эллипса

# Рисуем эллипс
pen.circle(100, 90)  # Рисуем первую дугу с радиусом по вертикали
pen.circle(200, 90)  # Рисуем вторую дугу с радиусом по горизонтали
pen.circle(100, 90)  # Рисуем третью дугу
pen.circle(200, 90)  # Рисуем четвертую дугу

turtle.done()

task5
import turtle

# Настройка экрана
screen = turtle.Screen()
screen.bgcolor("white")

# Создаем объект черепашки для рисования
pen = turtle.Turtle()
pen.shape("turtle")

# Настроим скорость рисования
pen.speed(5)

# Начнем рисовать звезду
pen.begin_fill()  # Начинаем заливку

pen.fillcolor("yellow")  # Устанавливаем цвет заливки

for _ in range(5):
    pen.forward(100)  # Рисуем одну сторону звезды
    pen.right(144)  # Поворот для создания правильного угла

pen.end_fill()  # Заканчиваем заливку

turtle.done()

task6
import turtle

# Настройка экрана
screen = turtle.Screen()
screen.bgcolor("white")

# Массив цветов
colors = ["red", "green", "blue", "yellow", "purple", "orange", "cyan"]

# Создаем объект черепашки для рисования
pen = turtle.Turtle()
pen.shape("turtle")

# Начальные параметры
pen.speed(10)  # Устанавливаем быструю скорость рисования
pen.width(2)

# Рисуем фигуру с несколькими окружностями
for i in range(12):  # 12 окружностей
    pen.penup()
    pen.goto(0, -20 * i)  # Каждый раз перемещаем черепашку вниз
    pen.pendown()
    
    pen.color(colors[i % len(colors)])  # Выбираем цвет из массива
    pen.circle(20 + i * 10)  # Радиус увеличивается с каждой окружностью

turtle.done()

task7
import turtle

# Настройка экрана
screen = turtle.Screen()
screen.bgcolor("white")

# Создание первой черепашки (для верхней половины окружности)
pen1 = turtle.Turtle()
pen1.shape("turtle")
pen1.color("red")
pen1.speed(10)

# Создание второй черепашки (для нижней половины окружности)
pen2 = turtle.Turtle()
pen2.shape("turtle")
pen2.color("blue")
pen2.speed(10)

# Рисуем верхнюю половину окружности с первой черепашкой
pen1.penup()
pen1.goto(-100, 0)  # Начальная позиция
pen1.pendown()
pen1.setheading(90)  # Направление вверх
pen1.circle(100, 180)  # Рисуем половину окружности

# Рисуем нижнюю половину окружности с второй черепашкой
pen2.penup()
pen2.goto(100, 0)  # Начальная позиция
pen2.pendown()
pen2.setheading(270)  # Направление вниз
pen2.circle(100, -180)  # Рисуем нижнюю половину окружности

# Одна черепашка спускается вниз
pen1.penup()
pen1.goto(-100, 0)
pen1.setheading(270)
pen1.pendown()
pen1.forward(100)  # Спускаемся вниз

# Вторая черепашка двигается вниз на половину своей окружности, поворачивает и двигается вперед
pen2.penup()
pen2.goto(100, 0)
pen2.setheading(270)
pen2.pendown()
pen2.forward(50)  # Спускаемся вниз на половину окружности
pen2.left(90)  # Поворот влево
pen2.forward(50)  # Двигаемся вперед

# Закрытие окна после рисования
turtle.done()

task8
import turtle

# Настройка экрана
screen = turtle.Screen()
screen.bgcolor("white")

# Создаем черепашку для рисования круга
pen = turtle.Turtle()
pen.shape("turtle")
pen.color("green")
pen.speed(5)

# Рисуем круг
pen.penup()
pen.goto(0, -100)  # Начальная позиция
pen.pendown()
pen.circle(100)  # Радиус круга 100

# Пишем текст внутри круга
pen.penup()
pen.goto(0, 0)  # Позиция текста в центре круга
pen.pendown()
pen.color("black")
pen.write("Текст внутри круга", align="center", font=("Arial", 16, "normal"))

# Закрытие окна после рисования
turtle.done()

task9
import turtle

# Создаем экран и загружаем изображение
screen = turtle.Screen()
screen.bgpic("back1.png")  # Путь к вашему изображению

# Создаем черепаху
t = turtle.Turtle()

# Здесь код для прохождения по белым клеткам, избегая серых клеток
# Пример пути, который черепаха будет двигаться
# (этот код зависит от изображения, на котором нужно пройти по белым клеткам)

# Для простоты предположим, что мы двигаемся по определенному маршруту
# через белые клетки (вам нужно будет добавить проверку на цвет)
t.penup()
t.goto(-100, 100)  # Начальная позиция
t.pendown()
t.setheading(0)  # Направление вправо
t.forward(100)
t.setheading(90)  # Направление вверх
t.forward(100)

turtle.done()

task10
import turtle

# Создаем экран и загружаем новое изображение
screen = turtle.Screen()
screen.bgpic("back2.png")  # Путь к изображению

# Создаем черепаху
t = turtle.Turtle()

# Двигаемся по черной линии, которая на изображении
# Например, можно использовать алгоритм поиска пути (для простоты предполагаем, что линия уже известна)

# Пример движения по черной линии
t.penup()
t.goto(-100, 100)
t.pendown()
t.setheading(0)  # Направление вправо
t.forward(100)
t.setheading(90)  # Направление вверх
t.forward(100)

turtle.done()

task11
import turtle

# Список цветов для заливки
colors = ["red", "blue", "green", "yellow", "purple", "orange"]

# Создаем черепаху
t = turtle.Turtle()

# Функция для рисования окружности с заливкой
def draw_circle(radius):
    for color in colors:
        t.begin_fill()
        t.fillcolor(color)
        t.circle(radius)
        t.end_fill()
        t.penup()
        t.forward(20)  # Немного двигаемся, чтобы нарисовать следующую окружность
        t.pendown()

# Рисуем окружности с разными цветами
t.penup()
t.goto(0, -100)  # Начальная позиция
t.pendown()

draw_circle(50)

turtle.done()

task12
import turtle

# Создаем экран и черепаху
screen = turtle.Screen()
t = turtle.Turtle()

# Инициализация переменных для подсчета шагов
total_steps = 0

while True:
    # Ввод направления и количества шагов
    direction = screen.textinput("Input", "Введите направление (w, a, s, d) или 'exit' для выхода")
    
    if direction == "exit":
        print(f"Общее количество шагов: {total_steps}")
        break
    
    steps = screen.numinput("Input", "Сколько шагов?")
    if steps is None:
        continue

    steps = int(steps)
    
    # Двигаем черепаху в соответствующем направлении
    if direction == "w":
        t.setheading(90)  # Направление вверх
        t.forward(steps)
    elif direction == "a":
        t.setheading(180)  # Направление влево
        t.forward(steps)
    elif direction == "s":
        t.setheading(270)  # Направление вниз
        t.forward(steps)
    elif direction == "d":
        t.setheading(0)  # Направление вправо
        t.forward(steps)
    
    total_steps += steps

turtle.done()

task13
import turtle

# Функции для управления черепашкой
def move_up():
    t.setheading(90)
    t.forward(10)

def move_down():
    t.setheading(270)
    t.forward(10)

def move_left():
    t.setheading(180)
    t.forward(10)

def move_right():
    t.setheading(0)
    t.forward(10)

# Создаем экран и черепаху
screen = turtle.Screen()
t = turtle.Turtle()

# Связываем функции с кнопками
screen.listen()
screen.onkey(move_up, "w")  # Клавиша "w" для движения вверх
screen.onkey(move_down, "s")  # Клавиша "s" для движения вниз
screen.onkey(move_left, "a")  # Клавиша "a" для движения влево
screen.onkey(move_right, "d")  # Клавиша "d" для движения вправо

# Ожидаем нажатий
screen.mainloop()
